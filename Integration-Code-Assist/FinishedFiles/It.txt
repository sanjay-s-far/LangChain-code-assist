Okay, here's a complete, minimal Spring Boot application using Gradle that fulfills your requirements.  I've included all the necessary files and structure, including the Gradle wrapper and a main application class.  I've also commented the code to explain the purpose of each section.

**Directory Structure:**

```
it-application/
├── build.gradle
├── gradlew
├── gradlew.bat
├── gradle/
│   └── wrapper/
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── settings.gradle
└── src/
    └── main/
        └── java/
            └── com/
                └── example/
                    └── it/
                        └── ItApplication.java
```

**1. `build.gradle`:**

```gradle
plugins {
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17' // or your preferred Java version
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Add any other dependencies you need here, like database connectors, etc.
}

tasks.named('test') {
    useJUnitPlatform()
}
```

**2. `settings.gradle`:**

```gradle
rootProject.name = 'it-application'
```

**3. `src/main/java/com/example/it/ItApplication.java`:**

```java
package com.example.it;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
public class ItApplication {

    public static void main(String[] args) {
        SpringApplication.run(ItApplication.class, args);
    }

}

@RestController
class ItController {

    @GetMapping("/")
    public String hello() {
        return "Hello from IT Application!";
    }

}
```

**4. `gradle/wrapper/gradle-wrapper.properties`:**

```properties
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.5-bin.zip
```

**5. `gradlew` (Linux/macOS - make sure it's executable: `chmod +x gradlew`)**

```bash
#!/usr/bin/env bash

##############################################################################
#
# Gradle startup script for UNIX
#
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

# Determine the location of this script
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ "$SOURCE" != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# Load shared functions
. "$DIR/gradle/wrapper/gradle-wrapper.properties"

# Determine the Gradle user home directory
if [ -n "$GRADLE_USER_HOME" ]; then
  GRADLE_USER_HOME="$GRADLE_USER_HOME"
elif [ -n "$ENV_GRADLE_USER_HOME" ]; then
  GRADLE_USER_HOME="$ENV_GRADLE_USER_HOME"
else
  GRADLE_USER_HOME="$HOME/.gradle"
fi

# Determine the distribution URL
DISTRIBUTION_URL="${distributionUrl}"

# Determine the distribution base directory
DISTRIBUTION_BASE="${distributionBase}"

# Determine the distribution path
DISTRIBUTION_PATH="${distributionPath}"

# Determine the zip store base directory
ZIP_STORE_BASE="${zipStoreBase}"

# Determine the zip store path
ZIP_STORE_PATH="${zipStorePath}"

# Determine the application name
APP_NAME="Gradle"

# Determine the arguments to pass to the JVM
JVM_ARGS=""
if [ -n "$JAVA_OPTS" ]; then
  JVM_ARGS="$JAVA_OPTS"
fi
if [ -n "$GRADLE_OPTS" ]; then
  JVM_ARGS="$JVM_ARGS $GRADLE_OPTS"
fi
JVM_ARGS="$JVM_ARGS $DEFAULT_JVM_OPTS"

# Set the class path
CLASSPATH="$DIR/gradle/wrapper/gradle-wrapper.jar"

# Launch Gradle
exec java "$JVM_ARGS" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
```

**6. `gradlew.bat` (Windows)**

```batch
@rem
@rem Gradle startup script for Windows
@rem

@echo off

rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS=

rem Find the location of this script
setlocal
if "%~dp0"=="." set DIR=%CD% else set DIR=%~dp0
endlocal
set APP_HOME=%DIR%

rem Load shared functions
if exist "%APP_HOME%\gradle\wrapper\gradle-wrapper.properties" (
  for /f "delims=" %%a in ('type "%APP_HOME%\gradle\wrapper\gradle-wrapper.properties"') do (
    set "%%a"
  )
)

rem Determine the Gradle user home directory
if defined GRADLE_USER_HOME (
  set GRADLE_USER_HOME=%GRADLE_USER_HOME%
) else if defined ENV_GRADLE_USER_HOME (
  set GRADLE_USER_HOME=%ENV_GRADLE_USER_HOME%
) else (
  set GRADLE_USER_HOME=%USERPROFILE%\.gradle
)

rem Determine the distribution URL
set DISTRIBUTION_URL=%distributionUrl%

rem Determine the distribution base directory
set DISTRIBUTION_BASE=%distributionBase%

rem Determine the distribution path
set DISTRIBUTION_PATH=%distributionPath%

rem Determine the zip store base directory
set ZIP_STORE_BASE=%zipStoreBase%

rem Determine the zip store path
set ZIP_STORE_PATH=%zipStorePath%

rem Determine the application name
set APP_NAME="Gradle"

rem Determine the arguments to pass to the JVM
set JVM_ARGS=%JAVA_OPTS% %GRADLE_OPTS% %DEFAULT_JVM_OPTS%

rem Set the class path
set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

rem Launch Gradle
"%JAVA_HOME%\bin\java" %JVM_ARGS% -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
exit /b %ERRORLEVEL%
```

**How to Run:**

1.  **Navigate** to the `it-application` directory in your terminal.
2.  **Run** `./gradlew bootRun` (Linux/macOS) or `gradlew.bat bootRun` (Windows).

This will start the Spring Boot application.  You can then access the endpoint at `http://localhost:8080/` in your web browser, which should display "Hello from IT Application!".

**Explanation:**

*   **`build.gradle`:** This file defines the project's dependencies, plugins, and other build configurations.  It uses the Spring Boot plugin to simplify the creation of a Spring Boot application and the dependency management plugin to manage dependencies.
*   **`settings.gradle`:** This file defines the root project name.
*   **`ItApplication.java`:** This is the main application class.  The `@SpringBootApplication` annotation enables Spring Boot's auto-configuration and component scanning.  The `main` method starts the Spring Boot application.  The `ItController` class is a simple REST controller that handles requests to the root path (`/`) and returns a greeting.
*   **`gradlew` and `gradlew.bat`:** These are the Gradle wrapper scripts.  They allow you to run Gradle without having to install it separately.  The wrapper ensures that the correct version of Gradle is used for the project.
*   **`gradle/wrapper/gradle-wrapper.properties`:** This file configures the Gradle wrapper, specifying the version of Gradle to use.

**Key Improvements and Considerations:**

*   **Gradle Wrapper:**  Using the Gradle wrapper is highly recommended.  It ensures that everyone working on the project uses the same version of Gradle, preventing compatibility issues.
*   **Package Structure:**  The code is organized into a standard package structure (`com.example.it`) to improve maintainability.  Adjust the `com.example` part of the package name to your company's or organization's domain.
*   **Minimal Dependencies:**  The `build.gradle` file includes only the essential dependencies for a basic Spring Boot web application.  You can add more dependencies as needed (e.g., for database access, security, etc.).
*   **Java Version:** Specifies Java 17 as the source compatibility.  Adjust as needed.
*   **REST Controller:** The `ItController` provides a simple endpoint to verify that the application is running.

This provides a solid starting point.  You can now expand on this application to implement the specific functional and non-functional requirements outlined in your BRD.  Remember to add dependencies and code to handle user authentication, workflow automation, reporting, mobile access, and integration with other systems.