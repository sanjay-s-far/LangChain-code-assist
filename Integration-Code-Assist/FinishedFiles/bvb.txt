Okay, here's a minimal Spring Boot project structure with the requested features, including the necessary files and code snippets:

**Project Structure:**

```
bvb/
├── build.gradle
├── settings.gradle
├── gradle/wrapper/
│   ├── gradle-wrapper.jar
│   └── gradle-wrapper.properties
├── gradlew
├── gradlew.bat
└── src/
    └── main/
        └── java/
            └── com/example/
                └── bvb/
                    ├── BvbApplication.java
                    ├── controller/
                    │   └── HelloController.java
                    └── config/
                        └── SecurityConfig.java
```

**1. `build.gradle`**

```gradle
plugins {
    id 'org.springframework.boot' version '3.2.3' // Or the latest stable version
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
}
```

**2. `settings.gradle`**

```gradle
rootProject.name = 'bvb'
```

**3. `gradle/wrapper/gradle-wrapper.properties`**

```properties
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https://services.gradle.org/distributions/gradle-8.5-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
```

**(Important):**  You will need to generate the `gradlew` and `gradlew.bat` files, as well as the `gradle-wrapper.jar` file using the following command in your terminal, in the `bvb` directory:

```bash
gradle wrapper --gradle-version 8.5
```

**4. `src/main/java/com/example/bvb/BvbApplication.java`**

```java
package com.example.bvb;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BvbApplication {

    public static void main(String[] args) {
        SpringApplication.run(BvbApplication.class, args);
    }

}
```

**5. `src/main/java/com/example/bvb/controller/HelloController.java`**

```java
package com.example.bvb.controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController {

    @GetMapping("/hello")
    public String hello() {
        return "Hello, World!";
    }

    @GetMapping("/secure")
    public String secure() {
        return "This is a secure endpoint!";
    }
}
```

**6. `src/main/java/com/example/bvb/config/SecurityConfig.java`**

```java
package com.example.bvb.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

import static org.springframework.security.config.Customizer.withDefaults;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public InMemoryUserDetailsManager userDetailsService() {
        UserDetails user = User.withDefaultPasswordEncoder()
                .username("user")
                .password("password")
                .roles("USER")
                .build();
        return new InMemoryUserDetailsManager(user);
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .authorizeHttpRequests((authz) -> authz
                        .requestMatchers("/secure").authenticated()
                        .anyRequest().permitAll()
                )
                .httpBasic(withDefaults())
                .formLogin(withDefaults()); // Optional: Enable form login as well.  Remove if you only want HTTP Basic.
        return http.build();
    }

}
```

**Explanation and Key Points:**

*   **`build.gradle`**:
    *   Defines the project's dependencies (Spring Web, Spring Security, testing).
    *   Specifies the Java version (17).
    *   Uses Spring Boot and Dependency Management plugins to simplify configuration.
*   **`settings.gradle`**: Sets the project's root name.
*   **`gradlew` and `gradlew.bat`**:  These are the Gradle Wrapper scripts. They allow you to run Gradle without having it installed globally.  The `gradle wrapper` command generates these.
*   **`BvbApplication.java`**: The main Spring Boot application class.
*   **`HelloController.java`**:  A simple controller with two endpoints:
    *   `/hello`:  Accessible to anyone.
    *   `/secure`: Requires authentication.
*   **`SecurityConfig.java`**:
    *   `@EnableWebSecurity`: Enables Spring Security's web security features.
    *   `InMemoryUserDetailsManager`: Creates an in-memory user for testing.  **Important:**  In a real application, you would use a database-backed user details service.  The default username is "user" and the password is "password".
    *   `SecurityFilterChain`: Configures the security rules:
        *   `/secure` endpoint requires authentication.
        *   All other requests are permitted.
        *   Uses HTTP Basic authentication (prompting for username/password in the browser).
        *   Includes optional form login.

**How to Run:**

1.  **Build:** Navigate to the project's root directory (`bvb`) in your terminal and run:

    ```bash
    ./gradlew build
    ```

2.  **Run:**  After the build is successful, run the application:

    ```bash
    ./gradlew bootRun
    ```

3.  **Access Endpoints:**

    *   `http://localhost:8080/hello` (No authentication required)
    *   `http://localhost:8080/secure` (Requires authentication - use username `user` and password `password`)

**Important Considerations for Production:**

*   **Real User Management:**  Replace the `InMemoryUserDetailsManager` with a database-backed user details service (e.g., using Spring Data JPA).
*   **Password Encoding:** Use a stronger password encoder than the default `NoOpPasswordEncoder` (which is used for convenience in this example).  `BCryptPasswordEncoder` is a common choice.
*   **HTTPS:**  Enable HTTPS in your production environment to protect sensitive data transmitted over the network.
*   **CSRF Protection:**  Enable CSRF protection, especially if you are using form-based authentication.
*   **Authorization:**  Implement more sophisticated authorization logic based on roles, permissions, or other criteria.
*   **Logging and Auditing:**  Add logging and auditing to track user activity and potential security incidents.
*   **Error Handling:** Implement robust error handling to prevent sensitive information from being exposed in error messages.
*   **Dependency Updates:** Keep your dependencies up to date to address security vulnerabilities.

This gives you a solid, minimal starting point for your Spring Boot project.  Remember to adapt the security configuration and user management to your specific application's requirements.