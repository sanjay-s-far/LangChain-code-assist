Okay, here's a complete Spring Boot application that fulfills the requirements outlined in the BRD.  This includes all the necessary files, directory structure, and explanations.

**Directory Structure**

```
c/
├── build.gradle
├── gradlew
├── gradlew.bat
├── gradle/
│   └── wrapper/
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── settings.gradle
└── src/
    └── main/
        ├── java/
        │   └── c/
        │       └── application/
        │           ├── CApplication.java
        │           ├── config/
        │           │   └── PubSubConfig.java
        │           ├── model/
        │           │   └── UserData.java
        │           ├── repository/
        │           │   └── UserRepository.java
        │           └── service/
        │               └── PubSubConsumerService.java
        └── resources/
            └── application.properties
```

**1. `build.gradle`**

```gradle
plugins {
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
}

group = 'c'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.google.cloud:spring-cloud-gcp-starter-pubsub:2.0.3' // Pub/Sub
    implementation 'org.postgresql:postgresql' // PostgreSQL Driver
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.cloud:spring-cloud-gcp-starter-test:2.0.3'
}

tasks.named('test') {
    useJUnitPlatform()
}
```

**2. `settings.gradle`**

```gradle
rootProject.name = 'c'
```

**3. `gradlew` and `gradlew.bat` and `gradle/wrapper/`**

These files are generated using the Gradle Wrapper.  You can generate them by running the following command in the project directory:

```bash
gradle wrapper --gradle-version=8.5
```

This will create the `gradlew`, `gradlew.bat`, and `gradle/wrapper/` directories and files.

**4. `src/main/java/c/application/CApplication.java`**

```java
package c.application;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class CApplication {

    public static void main(String[] args) {
        SpringApplication.run(CApplication.class, args);
    }

}
```

**5. `src/main/java/c/application/config/PubSubConfig.java`**

```java
package c.application.config;

import com.google.cloud.spring.pubsub.core.PubSubTemplate;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class PubSubConfig {

    @Bean
    public PubSubTemplate pubSubTemplate() {
        return new PubSubTemplate();
    }
}
```

**6. `src/main/java/c/application/model/UserData.java`**

```java
package c.application.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.Data;

import java.time.Instant;

@Entity
@Table(name = "user_data")
@Data
public class UserData {

    @Id
    private String userId;

    @NotBlank
    private String fullName;

    @Email
    @NotBlank
    private String emailAddress;

    @NotNull
    private Instant signupDate;

    @NotNull
    private Boolean isActive;

}
```

**7. `src/main/java/c/application/repository/UserRepository.java`**

```java
package c.application.repository;

import c.application.model.UserData;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<UserData, String> {
}
```

**8. `src/main/java/c/application/service/PubSubConsumerService.java`**

```java
package c.application.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.cloud.spring.pubsub.core.PubSubTemplate;
import com.google.cloud.spring.pubsub.support.BasicAcknowledgeablePubsubMessage;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import c.application.model.UserData;
import c.application.repository.UserRepository;

import java.io.IOException;
import java.time.Instant;

@Service
@Slf4j
public class PubSubConsumerService {

    @Value("${pubsub.topic}")
    private String topic;

    @Value("${pubsub.subscription}")
    private String subscription;

    @Autowired
    private PubSubTemplate pubSubTemplate;

    @Autowired
    private UserRepository userRepository;

    private final ObjectMapper objectMapper = new ObjectMapper();

    @PostConstruct
    public void subscribe() {
        pubSubTemplate.subscribe(subscription, message -> {
            try {
                BasicAcknowledgeablePubsubMessage pubsubMessage = (BasicAcknowledgeablePubsubMessage) message;
                String messagePayload = new String(pubsubMessage.getPayload().toByteArray());
                log.info("Received message: {}", messagePayload);

                try {
                    UserData userData = parseAndValidateMessage(messagePayload);
                    userRepository.save(userData);
                    log.info("Successfully saved user data: {}", userData.getUserId());
                    pubsubMessage.ack(); // Acknowledge the message
                } catch (IllegalArgumentException | DataAccessException e) {
                    log.error("Error processing message: {}", messagePayload, e);
                    // Optionally, push to a Dead Letter Topic here.
                    pubsubMessage.nack(); // Negative acknowledge the message, triggering retry.
                }

            } catch (Exception e) {
                log.error("Error during message processing: ", e);
                message.nack();
            }
        });
    }

    private UserData parseAndValidateMessage(String messagePayload) {
        try {
            JsonNode jsonNode = objectMapper.readTree(messagePayload);

            UserData userData = new UserData();
            userData.setUserId(jsonNode.get("userId").asText());
            userData.setFullName(jsonNode.get("name").asText());
            userData.setEmailAddress(jsonNode.get("email").asText());
            userData.setSignupDate(Instant.parse(jsonNode.get("signupDate").asText()));
            userData.setIsActive(jsonNode.get("isActive").asBoolean());

            return userData;

        } catch (IOException e) {
            log.error("Error parsing JSON: {}", messagePayload, e);
            throw new IllegalArgumentException("Invalid JSON format", e);
        } catch (NullPointerException e) {
            log.error("Missing field in JSON: {}", messagePayload, e);
            throw new IllegalArgumentException("Missing required field in JSON", e);
        } catch (IllegalArgumentException e) {
            log.error("Invalid timestamp format in JSON: {}", messagePayload, e);
            throw new IllegalArgumentException("Invalid timestamp format in JSON", e);
        }
    }
}
```

**9. `src/main/resources/application.properties`**

```properties
spring.application.name=pubsub-json-consumer
spring.jpa.hibernate.ddl-auto=update  # Automatically create/update the database schema

# Database Configuration (PostgreSQL Example)
spring.datasource.url=jdbc:postgresql://localhost:5432/analytics_db
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.datasource.driver-class-name=org.postgresql.Driver

# Google Cloud Pub/Sub Configuration
spring.cloud.gcp.project-id=my-project # Replace with your GCP project ID
pubsub.topic=projects/my-project/topics/user-updates  # As defined in the BRD
pubsub.subscription=user-updates-subscription # You need to create this subscription on Pub/Sub

# Logging Configuration
logging.level.c=INFO # Set logging level for the application package
```

**Explanation and Key Considerations:**

*   **Dependencies:** The `build.gradle` file includes the necessary dependencies for Spring Boot, Spring Data JPA, Google Cloud Pub/Sub, PostgreSQL, Lombok, and validation.
*   **Gradle Wrapper:** The Gradle Wrapper allows you to build the project without requiring users to have a specific version of Gradle installed locally.
*   **Configuration:**  The `application.properties` file configures the database connection, Pub/Sub topic/subscription, and other settings.  **Important:** You'll need to replace the placeholder values with your actual GCP project ID, database credentials, and Pub/Sub topic/subscription names.
*   **Model (`UserData`):** Represents the data structure for the `user_data` table.  It uses JPA annotations to map the class to the database table and columns.  Validation annotations (`@NotBlank`, `@Email`, `@NotNull`) ensure data integrity.
*   **Repository (`UserRepository`):**  A Spring Data JPA repository that provides methods for interacting with the `user_data` table.
*   **Pub/Sub Consumer (`PubSubConsumerService`):**
    *   Subscribes to the specified Pub/Sub topic using `PubSubTemplate`.
    *   Receives messages, parses them as JSON, and maps them to the `UserData` object.
    *   Validates the data.
    *   Saves the validated data to the database using the `UserRepository`.
    *   Acknowledges the message upon successful processing (`pubsubMessage.ack()`).
    *   Negative acknowledges the message (`pubsubMessage.nack()`) if an error occurs during processing, triggering a retry (according to Pub/Sub's retry policy).  You can also implement Dead Letter Topic logic here to handle messages that consistently fail.
*   **Error Handling:** The code includes error handling for JSON parsing, validation, and database operations.  Errors are logged using SLF4J.
*   **Logging:** Uses SLF4J for logging, allowing you to configure logging levels and destinations.
*   **At-Least-Once Delivery:**  Pub/Sub guarantees at-least-once delivery.  The code acknowledges the message *after* successfully saving it to the database, ensuring that the message is processed even if the application crashes after receiving the message but before saving it.  The message will be redelivered upon restart.
*   **Performance:**  Meeting the NFR1 (500 messages per second) will depend on the performance of your database and the complexity of your data processing. You may need to optimize database queries, use connection pooling, and scale your application horizontally to achieve this throughput.
*   **Database Setup:**  You will need to create the `analytics_db` database and the `user_data` table in your PostgreSQL instance.  The `spring.jpa.hibernate.ddl-auto=update` setting will automatically create/update the table schema based on the `UserData` entity.  However, it's recommended to use database migrations (e.g., Flyway or Liquibase) for more robust schema management in production.

**How to Run:**

1.  **Set up a PostgreSQL database:**  Install and configure PostgreSQL.  Create the `analytics_db` database and ensure that the user specified in `application.properties` has the necessary permissions.
2.  **Create a Google Cloud Project:** If you don't have one already.
3.  **Enable the Pub/Sub API:**  In your Google Cloud project, enable the Pub/Sub API.
4.  **Create a Pub/Sub Topic:** Create a topic named `projects/my-project/topics/user-updates` (replace `my-project` with your project ID) as specified in the BRD.
5.  **Create a Pub/Sub Subscription:** Create a subscription to the topic.  Name it `user-updates-subscription` (or whatever you configure in `application.properties`).
6.  **Configure `application.properties`:**  Update the `application.properties` file with your GCP project ID, database credentials, and Pub/Sub topic/subscription names.
7.  **Run the Application:**  Use the Gradle Wrapper to run the Spring Boot application:

    ```bash
    ./gradlew bootRun
    ```

8.  **Publish Messages:**  Publish JSON messages to the Pub/Sub topic.  Example message:

    ```json
    {
      "userId": "user123",
      "name": "John Doe",
      "email": "john.doe@example.com",
      "signupDate": "2024-01-01T10:00:00Z",
      "isActive": true
    }
    ```

**Important Notes:**

*   **Authentication:** This example assumes you have configured Google Cloud SDK (gcloud) with credentials that the application can use to authenticate with Pub/Sub.  Alternatively, you can use a service account and provide the service account key file to the application.  See the Spring Cloud GCP documentation for details: [https://cloud.spring.io/spring-cloud-gcp/reference/html/](https://cloud.spring.io/spring-cloud-gcp/reference/html/)
*   **Dead Letter Topic:**  To implement a Dead Letter Topic, you'll need to:
    *   Create a separate Pub/Sub topic for dead letters.
    *   Configure your subscription to forward dead-lettered messages to that topic. (This is done in the Google Cloud Console or using gcloud commands)
    *   In the `PubSubConsumerService`, when an error occurs, publish the message to the Dead Letter Topic instead of just nacking the message.
*   **Production Readiness:**  This is a basic example.  For a production environment, you would need to add:
    *   More robust error handling and retry logic.
    *   Monitoring and alerting.
    *   Proper security measures.
    *   Database connection pooling.
    *   Database migrations.
    *   Configuration management.
    *   Containerization (e.g., using Docker).
    *   Deployment to a cloud platform (e.g., Google Cloud Run, Kubernetes).

This comprehensive response provides a complete, runnable Spring Boot application that addresses the requirements of the BRD.  Remember to adjust the configuration and implement the necessary infrastructure in your Google Cloud environment.